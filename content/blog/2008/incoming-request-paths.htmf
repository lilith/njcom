Aliases: /113/incoming-request-paths/ /?p=113 /10951_Incoming_request_paths
Atom ID: http://66.29.219.39/?p=113
Summary: Casing and URL encoding add significant complexity to the jobs IIS and ASP.NET must perform. ASP.NET automatically decodes and lowercases the scheme, host, and port. The Path (and PathInfo) portions are decoded, but case is not changed.
Categories: asp-net
Tags: asp-net
Date: May 16 2008
Flags: hits

<h1>Incoming request paths</h1>

<style type="text/css">
dt { float:left; display:inline; padding-right:25px; font-weight:bold;}
dd {  }
h3 {margin-top:2em;}

dl{
border:1px solid #eaeaea;
padding:15px;
margin-top:15px;
font-size:8pt;
overflow:scroll;
}
span.querystring {
color:red;
}

span.pathinfo{
color:green;
}

span.filepath{
color:blue
}

table.rootVsSubfolder{
font-size:7.5pt;
color:black;

}
table.rootVsSubfolder td{
border-top: 1px solid gray;
padding:5px;
text-align:center;
}
table.rootVsSubfolder thead td{

font-weight:bold;
}
td.property{
border-right: 1px solid gray;
padding-left:0px;
}
td.root{
border-right: 1px solid gray;
}
td.subfolder{
padding-right:0px;
}
</style>
<h2>Casing and URL encoding</h2>
<p>Casing and URL encoding add significant complexity to the jobs IIS and ASP.NET must perform. ASP.NET automatically decodes and lowercases the scheme, host, and port. The Path (and PathInfo) portions are decoded, but case is not changed. The querystring is not modified. When the querystring is parsed to populate the QueryString collection, names and values get URL decoded once.

<p>There are an almost infinite number of ways to represent every URI  take for instance the following URIs, and how they are sanitized before your application receives them:</p>


<h3>URL encoded scheme (http)</h3>
<dl>
<dt>URI</dt>
<dd>
%68%74%74%70://localhost:87/content/pages/test.aspx</dd>

<dt>Response</dt>
<dd>IIS7 returns HTTP Error 400.0 - Bad Request</dd>
</dl>



<h3>Double URL encoded host</h3>
	
<dl>
<dt>URI</dt>
<dd>http://%25%34%63%25%34%66%25%34%33%25%34%31%25%34%63%25%34%38%25%34%66%25%35%33%25%35%34:87/Content/pages/test.aspx</dd>


<dt>Response</dt>
<dd>IE7 returns "Host not found" (browser only performs one level of URL decoding, apparently)</dd>
</dl>



<h3>URL Encoded host (UPPERCASE)</h3>
	
<dl>
<dt>URI</dt>
<dd>http://%4c%4f%43%41%4c%48%4f%53%54:87<span class="filepath">/Content/pages/test.aspx</span></dd>

<dt>Request.Url.OriginalString</dt>
<dd>http://localhost:87<span class="filepath">/Content/pages/test.aspx</span></dd>
</dl>
<p>IE7 decodes the host name automatically</p>

<h3>URL Encoding the host (lowercase)</h3>
	
<dl>
<dt>URI</dt>
<dd>Error! Hyperlink reference not valid.</dd>
	

<dt>Request.Url.OriginalString</dt>
<dd>http://localhost:87/Content/pages/test.aspx</dd>
</dl>



<h3>Mixed case</h3>
<dl>
<dt>URI</dt>
<dd>HttP://LOcalHoSt:87/<span class="filepath">CoNtEnT/pAgEs/tEsT.asPx</span></dd>
<dt>Request.Url.OriginalString</dt>
<dd>http://localhost:87/<span class="filepath">CoNtEnT/pAgEs/tEsT.asPx</span></dd>
</dl>


<h3>URLEncoding the entire URI (http://localhost:87/content/pages/test.aspx)</h3>
<dl>
<dt>URI</dt>
<dd>%68%74%74%70%3a%2f%2f%6c%6f%63%61%6c%68%6f%73%74%3a%38%37%2f%63%6f%6e%74%65%6e%74%2f%70%61%67%65%73%2f%74%65%73%74%2e%61%73%70%78</dd>

<dt>Respnse</dt>
<dd>IIS7 returns HTTP Error 400.0 - Bad Request</dd>
</dl>

<h3>URL Encoding the path (FilePath + PathInfo), but not the query string</h3>
<dl>
<dt>URI</dt>
<dd>http://localhost<span class="filepath">/%55%72%6c%54%65%73%74%73%2f%63%6f%6e%74%65%6e%74%2f%70%61%67%65%73%2f%74%65%73%74%2e%61%73%70%78</span><span class="pathinfo">%2f%66%6f%6c%64%65%72%2f%66%69%6c%65</span><span class="querystring">?querystring</span></dd>

	
<dt>Request.Url.OriginalString</dt>
<dd>http://localhost:80<span class="filepath">/UrlTests/content/pages/test.aspx</span><span class="pathinfo">/folder/file</span><span class="querystring">?querystring</span></dd>
</dl>


<h3>URL Encoding the path, querystring, and the "?" in-between.</h3>

	

<dl>
<dt>URI</dt>
<dd>http://localhost/%55%72%6c%54%65%73%74%73%2f%63%6f%6e%74%65%6e%74%2f%70%61%67%65%73%2f%74%65%73%74%2e%61%73%70%78%2f%66%6f%6c%64%65%72%2f%66%69%6c%65%3f%71%75%65%72%79%73%74%72%69%6e%67
</dd>

<dt>Response</dt>
<dd>
<pre>Server Error in '/UrlTests' Application.
'/UrlTests/content/pages/test.aspx/folder/file?querystring' is not a valid virtual path.

Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code.
Exception Details: System.Web.HttpException: '/UrlTests/content/pages/test.aspx/folder/file?querystring' is not a valid virtual path.
Source Error:
Frame1
Source File: c:\Users\Nathanael\desktop\webapplication2\Content\pages\test.aspx.cs    Line: 912308
Stack Trace:
Frame2
Version Information: Microsoft .NET Framework Version:2.0.50727.312; ASP.NET Version:2.0.50727.833
</pre>
</dd>
</dl>
<pre>
Hackers can exploit this to discover:
   If CustomErrors=false
   1.The physical location of the web site
   2.The physicial loation of the .NET framework and the
Of course, I'm sure there are other ways to generate errors - this is just one you can't patch.
</pre>
<p>Also, since the entire URL is parsed as the virtual path, it looks like this is a way to circumvent the splitting of FilePath, PathInfo, and the querystring, since the whole URL was parsed as the virtual path.</p>
<p>If you want the querystring to be parsed correctly, you cannot encode the delimiting question mark.</p>



<h3>URL Encoding the path and querystring separately</h3>
	

<dl>
<dt>URI</dt>
<dd>http://localhost<span class="filepath">/%55%72%6c%54%65%73%74%73%2f%63%6f%6e%74%65%6e%74%2f%70%61%67%65%73%2f%74%65%73%74%2e%61%73%70%78</span><span class="pathinfo">%2f%66%6f%6c%64%65%72%2f%66%69%6c%65</span><span class="querystring">?%71%75%65%72%79%73%74%72%69%6e%67</span></dd>
	
<dt>Request.Url.OriginalString</dt>
<dd>http://localhost:80<span class="filepath">/UrlTests/content/pages/test.aspx</span><span class="pathinfo">/folder/file</span><span class="querystring">?%71%75%65%72%79%73%74%72%69%6e%67</span></dd>
</dl>

<p>Note: HttpUtility.URLEncode() only encodes non-alphanumeric characters. You'll have to use something else to get complete encoding, such as is used above.</p>

	
<p>So, I think you can see why basing security on the incoming path is a bad idea. </p>

<h2>Differences between Root and Subfolder applications</h2>

<p>IIS allows websites to be hosted in virtual folders that do not correspond to the on-disk organization. For example, if you publish a website located in C:\Websites\MyWebsite2\ on virtual folder /Web1/Test/, The URI to access it would be http://mycomputer/Web1/Test/.</p>

<p>The following table contains data from single web site being accessed from two different locations. One channel is the virtual folder /URLTests on port 80, and the other is the root website on port 87.</p>



<table class="rootVsSubfolder" cellpadding="0" cellspacing="0">
<thead>
<tr><td class="property">
Property</td>
<td class="root" width="100px">http://localhost:87/content/pages/ test.aspx/pathinfo?query=value</td>
<td class="subfolder">http://localhost/UrlTests/content/pages/ test.aspx/pathinfo?query=value</td>
</tr>
</thead>
<tbody>
<tr><td class="property">	Request. ApplicationPath	</td><td class="root">	/	</td><td class="subfolder">	/UrlTests	</td></tr>
<tr><td class="property">	Request. RawUrl	</td><td class="root">	/content/Pages/test.aspx/pathinfo?query=value	</td><td class="subfolder">	/UrlTests/content/Pages/test.aspx/pathinfo?query=value	</td></tr>
<tr><td class="property">	Request. AppRelativeCurrent ExecutionFilePath	</td><td class="root">	~/content/Pages/test.aspx	</td><td class="subfolder">	~/content/Pages/test.aspx	</td></tr>
<tr><td class="property">	Request.Current ExecutionFilePath	</td><td class="root">	/content/Pages/test.aspx	</td><td class="subfolder">	/UrlTests/content/Pages/test.aspx	</td></tr>
<tr><td class="property">	Request. FilePath	</td><td class="root">	/content/Pages/test.aspx	</td><td class="subfolder">	/UrlTests/content/Pages/test.aspx	</td></tr>
<tr><td class="property">	Request. Path	</td><td class="root">	/content/Pages/test.aspx/pathinfo	</td><td class="subfolder">	/UrlTests/content/Pages/test.aspx/pathinfo	</td></tr>
<tr><td class="property">	Request. PathInfo	</td><td class="root">	/pathinfo	</td><td class="subfolder">	/pathinfo	</td></tr>
<tr><td class="property">	Request. PhysicalApplicationPath	</td><td class="root">	C:\Users\Nathanael\Desktop\WebApplication2\	</td><td class="subfolder">	C:\Users\Nathanael\Desktop\WebApplication2\	</td></tr>
<tr><td class="property">	Request. PhysicalPath	</td><td class="root">	C:\Users\Nathanael\Desktop\WebApplication2 \content\Pages\test.aspx	</td><td class="subfolder">	C:\Users\Nathanael\Desktop\WebApplication2 \content\Pages\test.aspx	</td></tr>
<tr><td class="property">	Request. Url.OriginalString	</td><td class="root">	http://localhost:87/content/Pages/ test.aspx/pathinfo?query=value	</td><td class="subfolder">	http://localhost:80/UrlTests/content/Pages/ test.aspx/pathinfo?query=value	</td></tr>
</tbody>
</table>
<p>
Note: CurrentExecutionFilePath (and the AppRelative version) both differ from FilePath with Server.Execute or Server.Transfer is used. CurrentExecutionFilePath changes to reflect the executing file, while FilePath remains unchanged. Spaces in the table above were inserted to allow wrapping of the text - the actual data contains no whitespace.
</p>

<p>This should illustrate why application-relative paths (~/file.aspx) should be used wherever possible - they permit the site to be hosted in virtual folder as well as in a site root. Can you imaging the maintenance costs if you needed to move your site, and were using absolute paths, such as (/vdir/file.aspx)? You may not currently need to host the site on a virtual folder for dev purposes, but what about 5 years from now when you want to keep the old system online in a subfolder of the new site?</p>

</p>

<!--url: 10951_Incoming_request_paths-->
